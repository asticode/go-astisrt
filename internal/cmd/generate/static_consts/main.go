package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"text/template"
)

const version = "v1.5.0"

var r = regexp.MustCompile(`\nstatic const ([^ ]+) ([^ ]+) =`)

type staticConst struct {
	Name string
	Type string
}

func (c staticConst) CName() string {
	return c.Name + "_"
}

type tpl struct {
	content  string
	filename string
}

var tpls = []tpl{
	{
		content: `// Code generated by astisrt using internal/cmd/generate/static_consts. DO NOT EDIT.
#include <srt/srt.h>

{{ range  $const := . }}{{ $const.Type }} {{ $const.CName }} = {{ $const.Name }};
{{ end }}`,
		filename: "static_consts.c",
	},
	{
		content: `// Code generated by astisrt using internal/cmd/generate/static_consts. DO NOT EDIT.
#include <srt/srt.h>

{{ range  $const := . }}static const {{ $const.Type }} {{ $const.CName }};
{{ end }}`,
		filename: "static_consts.h",
	},
}

func main() {
	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(fmt.Errorf("main: getting working directory failed: %w", err))
	}

	cs, err := staticConsts(dir)
	if err != nil {
		log.Fatal(fmt.Errorf("main: getting stats failed: %w", err))
	}

	for _, tpl := range tpls {
		log.Printf("generating %s\n", tpl.filename)

		f, err := os.Create(filepath.Join(dir, "pkg", tpl.filename))
		if err != nil {
			log.Fatal(fmt.Errorf("main: creating file failed: %w", err))
		}
		defer f.Close()

		if err = template.Must(template.New("tmpl").Parse(tpl.content)).Execute(f, cs); err != nil {
			log.Fatal(fmt.Errorf("main: executing template failed: %w", err))
		}
	}
}

func staticConsts(dir string) (cs []staticConst, err error) {
	// Read header
	var b []byte
	if b, err = ioutil.ReadFile(filepath.Join(dir, "tmp", version, "include", "srt", "srt.h")); err != nil {
		err = fmt.Errorf("main: reading header failed: %w", err)
		return
	}

	// Match
	matches := r.FindAllStringSubmatch(string(b), -1)
	if len(matches) < 1 {
		err = errors.New("main: invalid matches size")
		return
	}

	// Loop through matches
	for _, match := range matches {
		// Invalid length
		if len(match) < 3 {
			err = errors.New("main: invalid match size")
			return
		}

		// Append
		cs = append(cs, staticConst{
			Name: match[2],
			Type: match[1],
		})
	}
	return
}
