// Code generated by astisrt using internal/cmd/generate/options. DO NOT EDIT.
package astisrt

// #cgo LDFLAGS: -lsrt
// #include <srt/srt.h>
import "C"
import (
	"syscall"
	"unsafe"
)

// https://github.com/Haivision/srt/blob/master/docs/API/API-socket-options.md#list-of-options

type SocketOptions struct {
	s *Socket
}

func (s *Socket) Options() *SocketOptions {
	return &SocketOptions{s: s}
}

func (so *SocketOptions) getInt64(o C.SRT_SOCKOPT) (int64, error) {
	var v int64
	size := int(unsafe.Sizeof(v))
	err := cGetSockFlag(so.s.u, o, unsafe.Pointer(&v), &size)
	return v, err
}

func (so *SocketOptions) getInt32(o C.SRT_SOCKOPT) (int32, error) {
	var v int32
	size := int(unsafe.Sizeof(v))
	err := cGetSockFlag(so.s.u, o, unsafe.Pointer(&v), &size)
	return v, err
}

func (so *SocketOptions) getString(o C.SRT_SOCKOPT) (string, error) {
	buf := make([]byte, 1024)
	size := len(buf)
	err := cGetSockFlag(so.s.u, o, unsafe.Pointer(&buf[0]), &size)
	return string(buf[:size]), err
}

func (so *SocketOptions) getBool(o C.SRT_SOCKOPT) (bool, error) {
	var v bool
	size := int(unsafe.Sizeof(v))
	err := cGetSockFlag(so.s.u, o, unsafe.Pointer(&v), &size)
	return v, err
}

func (so *SocketOptions) getLinger(o C.SRT_SOCKOPT) (syscall.Linger, error) {
	var v syscall.Linger
	size := int(unsafe.Sizeof(v))
	err := cGetSockFlag(so.s.u, o, unsafe.Pointer(&v), &size)
	return v, err
}

func (so *SocketOptions) setInt64(o C.SRT_SOCKOPT, v int64) error {
	return cSetSockFlag(so.s.u, o, unsafe.Pointer(&v), int(unsafe.Sizeof(v)))
}

func (so *SocketOptions) setInt32(o C.SRT_SOCKOPT, v int32) error {
	return cSetSockFlag(so.s.u, o, unsafe.Pointer(&v), int(unsafe.Sizeof(v)))
}

func (so *SocketOptions) setBool(o C.SRT_SOCKOPT, v bool) error {
	return cSetSockFlag(so.s.u, o, unsafe.Pointer(&v), int(unsafe.Sizeof(v)))
}

func (so *SocketOptions) setString(o C.SRT_SOCKOPT, v string) error {
	return cSetSockFlag(so.s.u, o, unsafe.Pointer(&[]byte(v)[0]), len(v))
}

func (so *SocketOptions) setLinger(o C.SRT_SOCKOPT, v syscall.Linger) error {
	return cSetSockFlag(so.s.u, o, unsafe.Pointer(&v), int(unsafe.Sizeof(v)))
}

type Transtype int32

const (
	TranstypeLive = Transtype(C.SRTT_LIVE)
	TranstypeFile = Transtype(C.SRTT_FILE)
	TranstypeInvalid = Transtype(C.SRTT_INVALID)
)

type KmState int32

const (
	KmStateKmSUnsecured = KmState(C.SRT_KM_S_UNSECURED)
	KmStateKmSSecuring = KmState(C.SRT_KM_S_SECURING)
	KmStateKmSSecured = KmState(C.SRT_KM_S_SECURED)
	KmStateKmSNosecret = KmState(C.SRT_KM_S_NOSECRET)
	KmStateKmSBadsecret = KmState(C.SRT_KM_S_BADSECRET)
)


func (so *SocketOptions) Bindtodevice() (string, error) {
	v, err := so.getString(C.SRTO_BINDTODEVICE)
	return string(v), err
}

func (so *SocketOptions) SetBindtodevice(v string) error {
	return so.setString(C.SRTO_BINDTODEVICE, string(v))
}

func (so *SocketOptions) SetCongestion(v string) error {
	return so.setString(C.SRTO_CONGESTION, string(v))
}

func (so *SocketOptions) SetConntimeo(v int32) error {
	return so.setInt32(C.SRTO_CONNTIMEO, int32(v))
}

func (so *SocketOptions) Drifttracer() (bool, error) {
	v, err := so.getBool(C.SRTO_DRIFTTRACER)
	return bool(v), err
}

func (so *SocketOptions) SetDrifttracer(v bool) error {
	return so.setBool(C.SRTO_DRIFTTRACER, bool(v))
}

func (so *SocketOptions) SetEnforcedencryption(v bool) error {
	return so.setBool(C.SRTO_ENFORCEDENCRYPTION, bool(v))
}

func (so *SocketOptions) Event() (int32, error) {
	v, err := so.getInt32(C.SRTO_EVENT)
	return int32(v), err
}

func (so *SocketOptions) Fc() (int32, error) {
	v, err := so.getInt32(C.SRTO_FC)
	return int32(v), err
}

func (so *SocketOptions) SetFc(v int32) error {
	return so.setInt32(C.SRTO_FC, int32(v))
}

func (so *SocketOptions) SetGroupconnect(v int32) error {
	return so.setInt32(C.SRTO_GROUPCONNECT, int32(v))
}

func (so *SocketOptions) SetGroupminstabletimeo(v int32) error {
	return so.setInt32(C.SRTO_GROUPMINSTABLETIMEO, int32(v))
}

func (so *SocketOptions) Grouptype() (int32, error) {
	v, err := so.getInt32(C.SRTO_GROUPTYPE)
	return int32(v), err
}

func (so *SocketOptions) Inputbw() (int64, error) {
	v, err := so.getInt64(C.SRTO_INPUTBW)
	return int64(v), err
}

func (so *SocketOptions) SetInputbw(v int64) error {
	return so.setInt64(C.SRTO_INPUTBW, int64(v))
}

func (so *SocketOptions) Iptos() (int32, error) {
	v, err := so.getInt32(C.SRTO_IPTOS)
	return int32(v), err
}

func (so *SocketOptions) SetIptos(v int32) error {
	return so.setInt32(C.SRTO_IPTOS, int32(v))
}

func (so *SocketOptions) Ipttl() (int32, error) {
	v, err := so.getInt32(C.SRTO_IPTTL)
	return int32(v), err
}

func (so *SocketOptions) SetIpttl(v int32) error {
	return so.setInt32(C.SRTO_IPTTL, int32(v))
}

func (so *SocketOptions) Ipv6only() (int32, error) {
	v, err := so.getInt32(C.SRTO_IPV6ONLY)
	return int32(v), err
}

func (so *SocketOptions) SetIpv6only(v int32) error {
	return so.setInt32(C.SRTO_IPV6ONLY, int32(v))
}

func (so *SocketOptions) Isn() (int32, error) {
	v, err := so.getInt32(C.SRTO_ISN)
	return int32(v), err
}

func (so *SocketOptions) Kmpreannounce() (int32, error) {
	v, err := so.getInt32(C.SRTO_KMPREANNOUNCE)
	return int32(v), err
}

func (so *SocketOptions) SetKmpreannounce(v int32) error {
	return so.setInt32(C.SRTO_KMPREANNOUNCE, int32(v))
}

func (so *SocketOptions) Kmrefreshrate() (int32, error) {
	v, err := so.getInt32(C.SRTO_KMREFRESHRATE)
	return int32(v), err
}

func (so *SocketOptions) SetKmrefreshrate(v int32) error {
	return so.setInt32(C.SRTO_KMREFRESHRATE, int32(v))
}

func (so *SocketOptions) Kmstate() (KmState, error) {
	v, err := so.getInt32(C.SRTO_KMSTATE)
	return KmState(v), err
}

func (so *SocketOptions) Latency() (int32, error) {
	v, err := so.getInt32(C.SRTO_LATENCY)
	return int32(v), err
}

func (so *SocketOptions) SetLatency(v int32) error {
	return so.setInt32(C.SRTO_LATENCY, int32(v))
}

func (so *SocketOptions) Linger() (syscall.Linger, error) {
	v, err := so.getLinger(C.SRTO_LINGER)
	return syscall.Linger(v), err
}

func (so *SocketOptions) SetLinger(v syscall.Linger) error {
	return so.setLinger(C.SRTO_LINGER, syscall.Linger(v))
}

func (so *SocketOptions) Lossmaxttl() (int32, error) {
	v, err := so.getInt32(C.SRTO_LOSSMAXTTL)
	return int32(v), err
}

func (so *SocketOptions) SetLossmaxttl(v int32) error {
	return so.setInt32(C.SRTO_LOSSMAXTTL, int32(v))
}

func (so *SocketOptions) Maxbw() (int64, error) {
	v, err := so.getInt64(C.SRTO_MAXBW)
	return int64(v), err
}

func (so *SocketOptions) SetMaxbw(v int64) error {
	return so.setInt64(C.SRTO_MAXBW, int64(v))
}

func (so *SocketOptions) SetMessageapi(v bool) error {
	return so.setBool(C.SRTO_MESSAGEAPI, bool(v))
}

func (so *SocketOptions) Mininputbw() (int64, error) {
	v, err := so.getInt64(C.SRTO_MININPUTBW)
	return int64(v), err
}

func (so *SocketOptions) SetMininputbw(v int64) error {
	return so.setInt64(C.SRTO_MININPUTBW, int64(v))
}

func (so *SocketOptions) Minversion() (int32, error) {
	v, err := so.getInt32(C.SRTO_MINVERSION)
	return int32(v), err
}

func (so *SocketOptions) SetMinversion(v int32) error {
	return so.setInt32(C.SRTO_MINVERSION, int32(v))
}

func (so *SocketOptions) Mss() (int32, error) {
	v, err := so.getInt32(C.SRTO_MSS)
	return int32(v), err
}

func (so *SocketOptions) SetMss(v int32) error {
	return so.setInt32(C.SRTO_MSS, int32(v))
}

func (so *SocketOptions) Nakreport() (bool, error) {
	v, err := so.getBool(C.SRTO_NAKREPORT)
	return bool(v), err
}

func (so *SocketOptions) SetNakreport(v bool) error {
	return so.setBool(C.SRTO_NAKREPORT, bool(v))
}

func (so *SocketOptions) Oheadbw() (int32, error) {
	v, err := so.getInt32(C.SRTO_OHEADBW)
	return int32(v), err
}

func (so *SocketOptions) SetOheadbw(v int32) error {
	return so.setInt32(C.SRTO_OHEADBW, int32(v))
}

func (so *SocketOptions) Packetfilter() (string, error) {
	v, err := so.getString(C.SRTO_PACKETFILTER)
	return string(v), err
}

func (so *SocketOptions) SetPacketfilter(v string) error {
	return so.setString(C.SRTO_PACKETFILTER, string(v))
}

func (so *SocketOptions) SetPassphrase(v string) error {
	return so.setString(C.SRTO_PASSPHRASE, string(v))
}

func (so *SocketOptions) SetPayloadsize(v int32) error {
	return so.setInt32(C.SRTO_PAYLOADSIZE, int32(v))
}

func (so *SocketOptions) Pbkeylen() (int32, error) {
	v, err := so.getInt32(C.SRTO_PBKEYLEN)
	return int32(v), err
}

func (so *SocketOptions) SetPbkeylen(v int32) error {
	return so.setInt32(C.SRTO_PBKEYLEN, int32(v))
}

func (so *SocketOptions) Peeridletimeo() (int32, error) {
	v, err := so.getInt32(C.SRTO_PEERIDLETIMEO)
	return int32(v), err
}

func (so *SocketOptions) SetPeeridletimeo(v int32) error {
	return so.setInt32(C.SRTO_PEERIDLETIMEO, int32(v))
}

func (so *SocketOptions) Peerlatency() (int32, error) {
	v, err := so.getInt32(C.SRTO_PEERLATENCY)
	return int32(v), err
}

func (so *SocketOptions) SetPeerlatency(v int32) error {
	return so.setInt32(C.SRTO_PEERLATENCY, int32(v))
}

func (so *SocketOptions) Peerversion() (int32, error) {
	v, err := so.getInt32(C.SRTO_PEERVERSION)
	return int32(v), err
}

func (so *SocketOptions) Rcvbuf() (int32, error) {
	v, err := so.getInt32(C.SRTO_RCVBUF)
	return int32(v), err
}

func (so *SocketOptions) SetRcvbuf(v int32) error {
	return so.setInt32(C.SRTO_RCVBUF, int32(v))
}

func (so *SocketOptions) Rcvdata() (int32, error) {
	v, err := so.getInt32(C.SRTO_RCVDATA)
	return int32(v), err
}

func (so *SocketOptions) Rcvkmstate() (int32, error) {
	v, err := so.getInt32(C.SRTO_RCVKMSTATE)
	return int32(v), err
}

func (so *SocketOptions) Rcvlatency() (int32, error) {
	v, err := so.getInt32(C.SRTO_RCVLATENCY)
	return int32(v), err
}

func (so *SocketOptions) SetRcvlatency(v int32) error {
	return so.setInt32(C.SRTO_RCVLATENCY, int32(v))
}

func (so *SocketOptions) Rcvsyn() (bool, error) {
	v, err := so.getBool(C.SRTO_RCVSYN)
	return bool(v), err
}

func (so *SocketOptions) SetRcvsyn(v bool) error {
	return so.setBool(C.SRTO_RCVSYN, bool(v))
}

func (so *SocketOptions) Rcvtimeo() (int32, error) {
	v, err := so.getInt32(C.SRTO_RCVTIMEO)
	return int32(v), err
}

func (so *SocketOptions) SetRcvtimeo(v int32) error {
	return so.setInt32(C.SRTO_RCVTIMEO, int32(v))
}

func (so *SocketOptions) Rendezvous() (bool, error) {
	v, err := so.getBool(C.SRTO_RENDEZVOUS)
	return bool(v), err
}

func (so *SocketOptions) SetRendezvous(v bool) error {
	return so.setBool(C.SRTO_RENDEZVOUS, bool(v))
}

func (so *SocketOptions) Retransmitalgo() (int32, error) {
	v, err := so.getInt32(C.SRTO_RETRANSMITALGO)
	return int32(v), err
}

func (so *SocketOptions) SetRetransmitalgo(v int32) error {
	return so.setInt32(C.SRTO_RETRANSMITALGO, int32(v))
}

func (so *SocketOptions) Reuseaddr() (bool, error) {
	v, err := so.getBool(C.SRTO_REUSEADDR)
	return bool(v), err
}

func (so *SocketOptions) SetReuseaddr(v bool) error {
	return so.setBool(C.SRTO_REUSEADDR, bool(v))
}

func (so *SocketOptions) SetSender(v bool) error {
	return so.setBool(C.SRTO_SENDER, bool(v))
}

func (so *SocketOptions) Sndbuf() (int32, error) {
	v, err := so.getInt32(C.SRTO_SNDBUF)
	return int32(v), err
}

func (so *SocketOptions) SetSndbuf(v int32) error {
	return so.setInt32(C.SRTO_SNDBUF, int32(v))
}

func (so *SocketOptions) Snddata() (int32, error) {
	v, err := so.getInt32(C.SRTO_SNDDATA)
	return int32(v), err
}

func (so *SocketOptions) SetSnddropdelay(v int32) error {
	return so.setInt32(C.SRTO_SNDDROPDELAY, int32(v))
}

func (so *SocketOptions) Sndkmstate() (int32, error) {
	v, err := so.getInt32(C.SRTO_SNDKMSTATE)
	return int32(v), err
}

func (so *SocketOptions) Sndsyn() (bool, error) {
	v, err := so.getBool(C.SRTO_SNDSYN)
	return bool(v), err
}

func (so *SocketOptions) SetSndsyn(v bool) error {
	return so.setBool(C.SRTO_SNDSYN, bool(v))
}

func (so *SocketOptions) Sndtimeo() (int32, error) {
	v, err := so.getInt32(C.SRTO_SNDTIMEO)
	return int32(v), err
}

func (so *SocketOptions) SetSndtimeo(v int32) error {
	return so.setInt32(C.SRTO_SNDTIMEO, int32(v))
}

func (so *SocketOptions) State() (int32, error) {
	v, err := so.getInt32(C.SRTO_STATE)
	return int32(v), err
}

func (so *SocketOptions) Streamid() (string, error) {
	v, err := so.getString(C.SRTO_STREAMID)
	return string(v), err
}

func (so *SocketOptions) SetStreamid(v string) error {
	return so.setString(C.SRTO_STREAMID, string(v))
}

func (so *SocketOptions) Tlpktdrop() (bool, error) {
	v, err := so.getBool(C.SRTO_TLPKTDROP)
	return bool(v), err
}

func (so *SocketOptions) SetTlpktdrop(v bool) error {
	return so.setBool(C.SRTO_TLPKTDROP, bool(v))
}

func (so *SocketOptions) SetTranstype(v Transtype) error {
	return so.setInt32(C.SRTO_TRANSTYPE, int32(v))
}

func (so *SocketOptions) SetTsbpdmode(v bool) error {
	return so.setBool(C.SRTO_TSBPDMODE, bool(v))
}

func (so *SocketOptions) UdpRcvbuf() (int32, error) {
	v, err := so.getInt32(C.SRTO_UDP_RCVBUF)
	return int32(v), err
}

func (so *SocketOptions) SetUdpRcvbuf(v int32) error {
	return so.setInt32(C.SRTO_UDP_RCVBUF, int32(v))
}

func (so *SocketOptions) UdpSndbuf() (int32, error) {
	v, err := so.getInt32(C.SRTO_UDP_SNDBUF)
	return int32(v), err
}

func (so *SocketOptions) SetUdpSndbuf(v int32) error {
	return so.setInt32(C.SRTO_UDP_SNDBUF, int32(v))
}

func (so *SocketOptions) Version() (int32, error) {
	v, err := so.getInt32(C.SRTO_VERSION)
	return int32(v), err
}
