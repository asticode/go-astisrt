// Code generated by astisrt using internal/cmd/wrap. DO NOT EDIT.
package astisrt

// #cgo LDFLAGS: -lsrt
// #include <srt/srt.h>
import "C"

type Stats struct {
	c C.SRT_TRACEBSTATS
}

func (s *Socket) Stats(clear, instantaneous bool) (ss Stats, err error) {
	err = cBiStats(s.u, &ss.c, boolToCInt(clear), boolToCInt(instantaneous))
	return
}


func (ss Stats) MsTimeStamp() int64 {
	return int64(ss.c.msTimeStamp)
}

func (ss Stats) PktSentTotal() int64 {
	return int64(ss.c.pktSentTotal)
}

func (ss Stats) PktRecvTotal() int64 {
	return int64(ss.c.pktRecvTotal)
}

func (ss Stats) PktSndLossTotal() int {
	return int(ss.c.pktSndLossTotal)
}

func (ss Stats) PktRcvLossTotal() int {
	return int(ss.c.pktRcvLossTotal)
}

func (ss Stats) PktRetransTotal() int {
	return int(ss.c.pktRetransTotal)
}

func (ss Stats) PktSentACKTotal() int {
	return int(ss.c.pktSentACKTotal)
}

func (ss Stats) PktRecvACKTotal() int {
	return int(ss.c.pktRecvACKTotal)
}

func (ss Stats) PktSentNAKTotal() int {
	return int(ss.c.pktSentNAKTotal)
}

func (ss Stats) PktRecvNAKTotal() int {
	return int(ss.c.pktRecvNAKTotal)
}

func (ss Stats) UsSndDurationTotal() int64 {
	return int64(ss.c.usSndDurationTotal)
}

func (ss Stats) PktSndDropTotal() int {
	return int(ss.c.pktSndDropTotal)
}

func (ss Stats) PktRcvDropTotal() int {
	return int(ss.c.pktRcvDropTotal)
}

func (ss Stats) PktRcvUndecryptTotal() int {
	return int(ss.c.pktRcvUndecryptTotal)
}

func (ss Stats) ByteSentTotal() uint64 {
	return uint64(ss.c.byteSentTotal)
}

func (ss Stats) ByteRecvTotal() uint64 {
	return uint64(ss.c.byteRecvTotal)
}

func (ss Stats) ByteRcvLossTotal() uint64 {
	return uint64(ss.c.byteRcvLossTotal)
}

func (ss Stats) ByteRetransTotal() uint64 {
	return uint64(ss.c.byteRetransTotal)
}

func (ss Stats) ByteSndDropTotal() uint64 {
	return uint64(ss.c.byteSndDropTotal)
}

func (ss Stats) ByteRcvDropTotal() uint64 {
	return uint64(ss.c.byteRcvDropTotal)
}

func (ss Stats) ByteRcvUndecryptTotal() uint64 {
	return uint64(ss.c.byteRcvUndecryptTotal)
}

func (ss Stats) PktSent() int64 {
	return int64(ss.c.pktSent)
}

func (ss Stats) PktRecv() int64 {
	return int64(ss.c.pktRecv)
}

func (ss Stats) PktSndLoss() int {
	return int(ss.c.pktSndLoss)
}

func (ss Stats) PktRcvLoss() int {
	return int(ss.c.pktRcvLoss)
}

func (ss Stats) PktRetrans() int {
	return int(ss.c.pktRetrans)
}

func (ss Stats) PktRcvRetrans() int {
	return int(ss.c.pktRcvRetrans)
}

func (ss Stats) PktSentACK() int {
	return int(ss.c.pktSentACK)
}

func (ss Stats) PktRecvACK() int {
	return int(ss.c.pktRecvACK)
}

func (ss Stats) PktSentNAK() int {
	return int(ss.c.pktSentNAK)
}

func (ss Stats) PktRecvNAK() int {
	return int(ss.c.pktRecvNAK)
}

func (ss Stats) MbpsSendRate() float64 {
	return float64(ss.c.mbpsSendRate)
}

func (ss Stats) MbpsRecvRate() float64 {
	return float64(ss.c.mbpsRecvRate)
}

func (ss Stats) UsSndDuration() int64 {
	return int64(ss.c.usSndDuration)
}

func (ss Stats) PktReorderDistance() int {
	return int(ss.c.pktReorderDistance)
}

func (ss Stats) PktRcvAvgBelatedTime() float64 {
	return float64(ss.c.pktRcvAvgBelatedTime)
}

func (ss Stats) PktRcvBelated() int64 {
	return int64(ss.c.pktRcvBelated)
}

func (ss Stats) PktSndDrop() int {
	return int(ss.c.pktSndDrop)
}

func (ss Stats) PktRcvDrop() int {
	return int(ss.c.pktRcvDrop)
}

func (ss Stats) PktRcvUndecrypt() int {
	return int(ss.c.pktRcvUndecrypt)
}

func (ss Stats) ByteSent() uint64 {
	return uint64(ss.c.byteSent)
}

func (ss Stats) ByteRecv() uint64 {
	return uint64(ss.c.byteRecv)
}

func (ss Stats) ByteRcvLoss() uint64 {
	return uint64(ss.c.byteRcvLoss)
}

func (ss Stats) ByteRetrans() uint64 {
	return uint64(ss.c.byteRetrans)
}

func (ss Stats) ByteSndDrop() uint64 {
	return uint64(ss.c.byteSndDrop)
}

func (ss Stats) ByteRcvDrop() uint64 {
	return uint64(ss.c.byteRcvDrop)
}

func (ss Stats) ByteRcvUndecrypt() uint64 {
	return uint64(ss.c.byteRcvUndecrypt)
}

func (ss Stats) UsPktSndPeriod() float64 {
	return float64(ss.c.usPktSndPeriod)
}

func (ss Stats) PktFlowWindow() int {
	return int(ss.c.pktFlowWindow)
}

func (ss Stats) PktCongestionWindow() int {
	return int(ss.c.pktCongestionWindow)
}

func (ss Stats) PktFlightSize() int {
	return int(ss.c.pktFlightSize)
}

func (ss Stats) MsRTT() float64 {
	return float64(ss.c.msRTT)
}

func (ss Stats) MbpsBandwidth() float64 {
	return float64(ss.c.mbpsBandwidth)
}

func (ss Stats) ByteAvailSndBuf() int {
	return int(ss.c.byteAvailSndBuf)
}

func (ss Stats) ByteAvailRcvBuf() int {
	return int(ss.c.byteAvailRcvBuf)
}

func (ss Stats) MbpsMaxBW() float64 {
	return float64(ss.c.mbpsMaxBW)
}

func (ss Stats) ByteMSS() int {
	return int(ss.c.byteMSS)
}

func (ss Stats) PktSndBuf() int {
	return int(ss.c.pktSndBuf)
}

func (ss Stats) ByteSndBuf() int {
	return int(ss.c.byteSndBuf)
}

func (ss Stats) MsSndBuf() int {
	return int(ss.c.msSndBuf)
}

func (ss Stats) MsSndTsbPdDelay() int {
	return int(ss.c.msSndTsbPdDelay)
}

func (ss Stats) PktRcvBuf() int {
	return int(ss.c.pktRcvBuf)
}

func (ss Stats) ByteRcvBuf() int {
	return int(ss.c.byteRcvBuf)
}

func (ss Stats) MsRcvBuf() int {
	return int(ss.c.msRcvBuf)
}

func (ss Stats) MsRcvTsbPdDelay() int {
	return int(ss.c.msRcvTsbPdDelay)
}

func (ss Stats) PktSndFilterExtraTotal() int {
	return int(ss.c.pktSndFilterExtraTotal)
}

func (ss Stats) PktRcvFilterExtraTotal() int {
	return int(ss.c.pktRcvFilterExtraTotal)
}

func (ss Stats) PktRcvFilterSupplyTotal() int {
	return int(ss.c.pktRcvFilterSupplyTotal)
}

func (ss Stats) PktRcvFilterLossTotal() int {
	return int(ss.c.pktRcvFilterLossTotal)
}

func (ss Stats) PktSndFilterExtra() int {
	return int(ss.c.pktSndFilterExtra)
}

func (ss Stats) PktRcvFilterExtra() int {
	return int(ss.c.pktRcvFilterExtra)
}

func (ss Stats) PktRcvFilterSupply() int {
	return int(ss.c.pktRcvFilterSupply)
}

func (ss Stats) PktRcvFilterLoss() int {
	return int(ss.c.pktRcvFilterLoss)
}

func (ss Stats) PktReorderTolerance() int {
	return int(ss.c.pktReorderTolerance)
}

func (ss Stats) PktSentUniqueTotal() int64 {
	return int64(ss.c.pktSentUniqueTotal)
}

func (ss Stats) PktRecvUniqueTotal() int64 {
	return int64(ss.c.pktRecvUniqueTotal)
}

func (ss Stats) ByteSentUniqueTotal() uint64 {
	return uint64(ss.c.byteSentUniqueTotal)
}

func (ss Stats) ByteRecvUniqueTotal() uint64 {
	return uint64(ss.c.byteRecvUniqueTotal)
}

func (ss Stats) PktSentUnique() int64 {
	return int64(ss.c.pktSentUnique)
}

func (ss Stats) PktRecvUnique() int64 {
	return int64(ss.c.pktRecvUnique)
}

func (ss Stats) ByteSentUnique() uint64 {
	return uint64(ss.c.byteSentUnique)
}

func (ss Stats) ByteRecvUnique() uint64 {
	return uint64(ss.c.byteRecvUnique)
}
