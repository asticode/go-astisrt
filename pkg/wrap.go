// Code generated by astisrt using internal/cmd/generate/wrap. DO NOT EDIT.
package astisrt

// #cgo LDFLAGS: -lsrt
// #include "static_consts.h"
// #include <srt/srt.h>
// #include "wrap.h"
import "C"
import (
	"unsafe"
)

func cGetSockFlag(s C.SRTSOCKET, o C.SRT_SOCKOPT, p unsafe.Pointer, size *int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_getsockflag(s, o, p, (*C.int)(unsafe.Pointer(size)), &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cSetSockFlag(s C.SRTSOCKET, o C.SRT_SOCKOPT, p unsafe.Pointer, size int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_setsockflag(s, o, p, (C.int)(size), &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cStartup() error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_startup(&srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cCleanup() error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_cleanup(&srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cCreateSocket() (C.SRTSOCKET, error) {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_create_socket(&srtErrno, &sysErrno)
	if ret == C.SRT_INVALID_SOCK_ {
		return ret, newError(srtErrno, sysErrno)
	}
	return ret, nil
}

func cClose(s C.SRTSOCKET) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_close(s, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cBind(s C.SRTSOCKET, addr *C.struct_sockaddr, size C.int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_bind(s, addr, size, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cListen(s C.SRTSOCKET, backlog C.int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_listen(s, backlog, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cConnect(s C.SRTSOCKET, addr *C.struct_sockaddr, size C.int) (C.int, error) {
	var srtErrno C.int
	var sysErrno C.int
	var rejectReason C.int
	ret := C.astisrt_connect(s, addr, size, &srtErrno, &sysErrno, &rejectReason)
	if ret == C.SRT_ERROR_ {
		return rejectReason, newError(srtErrno, sysErrno)
	}
	return rejectReason, nil
}

func cAccept(s C.SRTSOCKET, addr *C.struct_sockaddr, size *C.int) (C.SRTSOCKET, error) {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_accept(s, addr, size, &srtErrno, &sysErrno)
	if ret == C.SRT_INVALID_SOCK_ {
		return ret, newError(srtErrno, sysErrno)
	}
	return ret, nil
}

func cListenCallback(lsn C.SRTSOCKET) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_listen_callback(lsn, unsafe.Pointer(&lsn), &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cConnectCallback(clr C.SRTSOCKET) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_connect_callback(clr, unsafe.Pointer(&clr), &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cSetRejectReason(sock C.SRTSOCKET, value C.int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_setrejectreason(sock, value, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cBiStats(u C.SRTSOCKET, perf *C.SRT_TRACEBSTATS, clear C.int, instantaneous C.int) error {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_bistats(u, perf, clear, instantaneous, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return newError(srtErrno, sysErrno)
	}
	return nil
}

func cRecMsg2(u C.SRTSOCKET, buf *C.char, len C.int, mctrl *C.SRT_MSGCTRL) (C.int, error) {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_recvmsg2(u, buf, len, mctrl, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return ret, newError(srtErrno, sysErrno)
	}
	return ret, nil
}

func cSendMsg2(u C.SRTSOCKET, buf *C.char, len C.int, mctrl *C.SRT_MSGCTRL) (C.int, error) {
	var srtErrno C.int
	var sysErrno C.int
	ret := C.astisrt_sendmsg2(u, buf, len, mctrl, &srtErrno, &sysErrno)
	if ret == C.SRT_ERROR_ {
		return ret, newError(srtErrno, sysErrno)
	}
	return ret, nil
}
